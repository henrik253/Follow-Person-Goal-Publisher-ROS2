
Ouster Repo Ros branch
git clone --recursive --branch ros2 https://github.com/ouster-lidar/ouster-ros
driver_params.yaml server hostname eintragen ... 
colcon build --symlink-install
. install/local_setup.bash
ros2 launch ouster_ros driver.launch.py -s // zeigt optionen an z.B. ohne Vviz
ros2 launch ouster_ros driver.launch.py  
ip a 
export ROS_DOMAIN_ID=4 // in allen Terminals 


unter: http://rbt-10b.lri.hochschule-trier.de/config Ipv4 DHCP in sensor_hostname eintragen ohne port 192.168.119.140
unter: http://rbt-10b.lri.hochschule-trier.de/config UDP Des Adresse diese in config eintragemn

in anderem Terminal dann: 
export ROS_Domain_ID=4 
tos topic list 


// RViz ohne ros2 launch öffnen: ros2 launch ouster_ros driver.launch.py viz:=False 
wenn ROS_DOMAIN_ID=4 dann neues terminal öffnen ROS Domain ändern von 0 auf 4 dann rviz2 mittels Terminal öffnen: rviz2

in RVIZ: 
	-Reliabillity Policy auf Best Effort
	- Fixed Frame auf etwas anderes als map os_imu z.B. 
	
	
ZED 2I 
https://github.com/stereolabs/zed-ros2-wrapper meneu lesemn aber nur notierten punkte beachten :

git clone  --recursive https://github.com/stereolabs/zed-ros2-wrapper.git
colcon build --symlink-install // symlink für linken in install ordner
 ros2 launch zed_wrapper zed_camera.launch.py camera_model:=<camera_model> // camera_model = zed2i 


// Sauberer notiert
GIT: 
	Submodules
		git submodules add -b branchname url 
		git submodules add url 

	Falls gleiche Submodules bereits gestaged sind dann nachschauen mit: 
		git ls-files --stage projectname 
	verwerfen mittels: 
		git rm --cached projectname

	falls submodules submodules besitzen: 
		git submodules update --init --recursive 

BASH: 
	export varName="Value der localen Env Variable" 
	echo $varName // gibt den Wert aus 
	. // ist das gleiche wie source
	source install/local_setup.bash // sourced skript, also führt es in der eigenen Shell aus

	Skripting 
	chmod +x script.sh // Skript ausführbar machne 
	./script.sh 


OUSTER OS1 
-	Ouster mit Netzwerk verbinden 
-	Im Browser mittels url suchen rbt-10b.lri.hochschule-trier.de
-	Hostname in driver_params.yaml eintragen und UDP Dest Adresse: GGF. UDP DEST auf .36 erhöhen!!!  auf website und in config
-	colcon build --symlink-install // in workspace!!!
-	. install/local_setup.bash // sourcing des skriptes in eigener Shell (nicht in neuer) z.B.  Umgebungsvariablen in der Shell zu ändern
-	ros2 launch ouster_ros driver.launch.py  

mit ip a um netze su sehen 
		
Zweiter Ansatz: 
.36 verwenden und in config auf website auf set Local setzen!



ROSBAG 
	ros2 bag record /ouster/scan
	ros2 bag play rosbag2_2024_10_23-18_09_51/rosbag2_2024_10_23-18_09_51_0.db3 --loop


Turtlebot
	Terminal1:
		source  /opt/ros/humble/setup.bash
		export TURTLEBOT3_MODEL=burger
		export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:`ros2 pkg \
		prefix turtlebot3_gazebo \
		`/share/turtlebot3_gazebo/models/

		ros2 launch turtlebot3_gazebo empty_world.launch.py
	Terminal2: 
		 export TURTLEBOT3_MODEL=burger
		 ros2 run turtlebot3_teleop teleop_keyboard


Running Turtlebot (SLAM) Navigating While Mapping
	source /opt/ros/humble/setup.bash
	export TURTLEBOT3_MODEL=waffle
	export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/opt/ros/humble/share/turtlebot3_gazebo/models
	ros2 launch nav2_bringup tb3_simulation_launch.py slam:=True


tb3_simulation_launch.py Analyse # when slam:=True !!!!
		start_robot_state_publisher_cmd = Node(
			condition=IfCondition(use_robot_state_pub),
			package='robot_state_publisher',
			executable='robot_state_publisher',
			name='robot_state_publisher',
			namespace=namespace,
			output='screen',
			parameters=[{'use_sim_time': use_sim_time,
						'robot_description': robot_description}],
			remappings=remappings)

bringup_launch.py
		Node(  # use this for improvement of perfomance by running the nodes in a single proccess!
            condition=IfCondition(use_composition),
            name='nav2_container',
            package='rclcpp_components',
            executable='component_container_isolated',
            parameters=[configured_params, {'autostart': autostart}],
            arguments=['--ros-args', '--log-level', log_level],
            remappings=remappings,
            output='screen')

		# Launch SLAM
		IncludeLaunchDescription(
					PythonLaunchDescriptionSource(os.path.join(launch_dir, 'slam_launch.py')),
					condition=IfCondition(slam),
					launch_arguments={'namespace': namespace,
									'use_sim_time': use_sim_time,
									'autostart': autostart,
									'use_respawn': use_respawn,
									'params_file': params_file}.items())

		# Launch navigation
		 IncludeLaunchDescription(
            PythonLaunchDescriptionSource(os.path.join(launch_dir, 'navigation_launch.py')),
            launch_arguments={'namespace': namespace,
                              'use_sim_time': use_sim_time,
                              'autostart': autostart,
                              'params_file': params_file,
                              'use_composition': use_composition,
                              'use_respawn': use_respawn,
                              'container_name': 'nav2_container'}.items()),